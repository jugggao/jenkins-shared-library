package jugggao.com
// The global script scope
// def ctx = context(scope: scriptScope())
contributor(context()) {
    method(name: 'parallel', type: 'Object', params: ['closures':'java.util.Map'], doc: 'Execute in parallel')
    method(name: 'parallel', type: 'Object', namedParams: [parameter(name: 'closures', type: 'java.util.Map'), parameter(name: 'failFast', type: 'java.lang.Boolean'), ], doc: 'Execute in parallel')
    method(name: 'acceptGitLabMR', type: 'Object', params: [:], doc: 'Accept GitLab Merge Request')
    method(name: 'acceptGitLabMR', type: 'Object', namedParams: [parameter(name: 'mergeCommitMessage', type: 'java.lang.String'), parameter(name: 'useMRDescription', type: 'java.lang.Boolean'), parameter(name: 'removeSourceBranch', type: 'java.lang.Boolean'), ], doc: 'Accept GitLab Merge Request')
    method(name: 'addBadge', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Badge')
    method(name: 'addErrorBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Error Badge')
    method(name: 'addErrorBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Error Badge')
    method(name: 'addGitLabMRComment', type: 'Object', params: [:], doc: 'Add comment on GitLab Merge Request')
    method(name: 'addGitLabMRComment', type: 'Object', namedParams: [parameter(name: 'comment', type: 'java.lang.String'), ], doc: 'Add comment on GitLab Merge Request')
    method(name: 'addHtmlBadge', type: 'Object', params: [html:'java.lang.String'], doc: 'Add a html badge Text')
    method(name: 'addHtmlBadge', type: 'Object', namedParams: [parameter(name: 'html', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Add a html badge Text')
    method(name: 'addInfoBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Info Badge')
    method(name: 'addInfoBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Info Badge')
    method(name: 'addShortText', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Short Text')
    method(name: 'addShortText', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'background', type: 'java.lang.String'), parameter(name: 'border', type: 'java.lang.java.lang.Integereger'), parameter(name: 'borderColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Short Text')
    method(name: 'addWarningBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Warning Badge')
    method(name: 'addWarningBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Warning Badge')
    method(name: 'ansiColor', type: 'Object', params: [colorMapName:'java.lang.String', body:'Closure'], doc: 'Color ANSI Console Output')
    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'propagate', type: 'java.lang.Boolean'), parameter(name: 'quietPeriod', type: 'java.lang.java.lang.Integereger'), parameter(name: 'wait', type: 'java.lang.Boolean'), ], doc: 'Build a job')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchjava.lang.Integererruptions', type: 'java.lang.Boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
    method(name: 'compareVersions', type: 'Object', namedParams: [parameter(name: 'v1', type: 'java.lang.String'), parameter(name: 'v2', type: 'java.lang.String'), parameter(name: 'failIfEmpty', type: 'java.lang.Boolean'), ], doc: 'Compare two version number strings')
    method(name: 'createSummary', type: 'Object', params: [icon:'java.lang.String'], doc: 'Prjava.lang.Integer Message')
    method(name: 'createSummary', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Prjava.lang.Integer Message')
    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Prjava.lang.Integer Message')
    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'builds', type: 'java.util.List'), ], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [name:'java.lang.String', body:'Closure'], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'builds', type: 'java.util.List'), parameter(name: 'connection', type: 'Map'), ], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'customHeaders', type: 'java.util.List'), parameter(name: 'httpMode', type: 'java.lang.String'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'java.lang.Boolean'), parameter(name: 'multipartName', type: 'java.lang.String'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.java.lang.Integereger'), parameter(name: 'uploadFile', type: 'java.lang.String'), parameter(name: 'useSystemProperties', type: 'java.lang.Boolean'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), parameter(name: 'wrapAsMultipart', type: 'java.lang.Boolean'), ], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for java.lang.Integerer active input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for java.lang.Integerer active input')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
    method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
    method(name: 'lock', type: 'Object', params: [resource:'java.lang.String', body:'Closure'], doc: 'Lock shared resource')
    method(name: 'lock', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'java.lang.Boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'java.lang.Integer'), parameter(name: 'skipIfLocked', type: 'java.lang.Boolean'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.java.lang.Integereger'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.java.lang.Integereger'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'unsafe', type: 'java.lang.Boolean'), ], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label:'java.lang.String', body:'Closure'], doc: 'Allocate node')
    method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'java.lang.Boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'podTemplate', type: 'Object', params: [body:'Closure'], doc: 'Define a podTemplate to use in the kubernetes plugin')
    method(name: 'podTemplate', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'activeDeadlineSeconds', type: 'java.lang.Integer'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'containers', type: 'java.util.List'), parameter(name: 'envVars', type: 'java.util.List'), parameter(name: 'hostNetwork', type: 'java.lang.Boolean'), parameter(name: 'idleMinutes', type: 'java.lang.Integer'), parameter(name: 'imagePullSecrets', type: 'java.util.List'), parameter(name: 'inheritFrom', type: 'java.lang.String'), parameter(name: 'instanceCap', type: 'java.lang.java.lang.Integereger'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'nodeSelector', type: 'java.lang.String'), parameter(name: 'nodeUsageMode', type: 'java.lang.String'), parameter(name: 'podRetention', type: 'Map'), parameter(name: 'runAsGroup', type: 'java.lang.String'), parameter(name: 'runAsUser', type: 'java.lang.String'), parameter(name: 'serviceAccount', type: 'java.lang.String'), parameter(name: 'showRawYaml', type: 'java.lang.Boolean'), parameter(name: 'slaveConnectTimeout', type: 'java.lang.Integer'), parameter(name: 'supplementalGroups', type: 'java.lang.String'), parameter(name: 'volumes', type: 'java.util.List'), parameter(name: 'workingDir', type: 'java.lang.String'), parameter(name: 'workspaceVolume', type: 'Map'), parameter(name: 'yaml', type: 'java.lang.String'), parameter(name: 'yamlMergeStrategy', type: 'Map'), ], doc: 'Define a podTemplate to use in the kubernetes plugin')
    method(name: 'properties', type: 'Object', params: [properties:'java.util.List'], doc: 'Set job properties')
    method(name: 'publishChecks', type: 'Object', params: [:], doc: 'Publish customized checks to SCM platforms')
    method(name: 'publishChecks', type: 'Object', namedParams: [parameter(name: 'actions', type: 'java.util.List'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'conclusion', type: 'Map'), parameter(name: 'detailsURL', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'status', type: 'Map'), parameter(name: 'summary', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'title', type: 'java.lang.String'), ], doc: 'Publish customized checks to SCM platforms')
    method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
    method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
    method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
    method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'returnPojo', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
    method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
    method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
    method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'java.lang.Integererpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
    method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'removeBadges', type: 'Object', params: [:], doc: 'Remove Badges')
    method(name: 'removeBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Badges')
    method(name: 'removeHtmlBadges', type: 'Object', params: [:], doc: 'Remove Html Badges')
    method(name: 'removeHtmlBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Html Badges')
    method(name: 'removeSummaries', type: 'Object', params: [:], doc: 'Remove Summaries')
    method(name: 'removeSummaries', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Summaries')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'java.util.List'), parameter(name: 'ignoreErrors', type: 'java.lang.Boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count:'java.lang.Integer', body:'Closure'], doc: 'Retry the body up to N times')
    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
    method(name: 'sleep', type: 'Object', params: [time:'java.lang.Integer'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
    method(name: 'stage', type: 'Object', params: [name:'java.lang.String', body:'Closure'], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.java.lang.Integereger'), ], doc: 'Stage')
    method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
    method(name: 'timeout', type: 'Object', params: [time: 'java.lang.Integer', body:'Closure'], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'activity', type: 'java.lang.Boolean'), parameter(name: 'unit', type: 'java.lang.String'), ], doc: 'Enforce time limit')
    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
    method(name: 'updateGitlabCommitStatus', type: 'Object', params: [:], doc: 'Update the commit status in GitLab')
    method(name: 'updateGitlabCommitStatus', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Update the commit status in GitLab')
    method(name: 'waitForQualityGate', type: 'Object', params: [abortPipeline:'java.lang.Boolean'], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
    method(name: 'waitForQualityGate', type: 'Object', namedParams: [parameter(name: 'abortPipeline', type: 'java.lang.Boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'webhookSecretId', type: 'java.lang.String'), ], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'initialRecurrencePeriod', type: 'long'), parameter(name: 'quiet', type: 'java.lang.Boolean'), ], doc: 'Wait for condition')
    method(name: 'warnError', type: 'Object', params: [message:'java.lang.String', body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'warnError', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchjava.lang.Integererruptions', type: 'java.lang.Boolean'), ], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'withChecks', type: 'Object', params: [name:'java.lang.String', body:'Closure'], doc: 'Inject checks properties java.lang.Integero its closure')
    method(name: 'withCredentials', type: 'Object', params: [bindings:'java.util.List', body:'Closure'], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: 'Object', params: [overrides:'java.util.List', body:'Closure'], doc: 'Set environment variables')
    method(name: 'wrap', type: 'Object', params: [delegate:'Map', body:'Closure'], doc: 'General Build Wrapper')
    method(name: 'ws', type: 'Object', params: [dir:'java.lang.String', body:'Closure'], doc: 'Allocate workspace')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from java.lang.Integerernal APIs')
    method(name: 'withContext', type: 'Object', params: [context:'java.lang.Object', body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from java.lang.Integerernal APIs within a block')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'demo', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'serviceEntry', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')


    // node
    method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
    method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'java.lang.Boolean'), parameter(name: 'returnStdout', type: 'java.lang.Boolean'), ], doc: 'Windows Batch Script')
    method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
    method(name: 'checkout', type: 'Object', params: [scm:'org.jenkinsci.plugins.workflow.multibranch.SCMVar'], doc: 'Check out from version control')
    method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'poll', type: 'java.lang.Boolean'), ], doc: 'Check out from version control')
    method(name: 'container', type: 'Object', params: [name:'java.lang.String', body:'Closure'], doc: 'Run build steps in a container')
    method(name: 'container', type: 'Object', params: [body:'Closure'], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'shell', type: 'java.lang.String'), ], doc: 'Run build steps in a container')
    method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
    method(name: 'dir', type: 'Object', params: [path:'java.lang.String', body:'Closure'], doc: 'Change current directory')
    method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
    method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
    method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
    method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
    method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'java.lang.Boolean'), ], doc: 'Git')
    method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
    method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'java.lang.Boolean'), parameter(name: 'checksName', type: 'java.lang.String'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'java.lang.Boolean'), parameter(name: 'skipPublishingChecks', type: 'java.lang.Boolean'), parameter(name: 'testDataPublishers', type: 'java.util.List'), ], doc: 'Archive JUnit-formatted test results')
    method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file java.lang.Integero the Pipeline script')
    method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
    method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'java.lang.Boolean'), parameter(name: 'returnStdout', type: 'java.lang.Boolean'), ], doc: 'PowerShell Script')
    method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
    method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'java.lang.Boolean'), ], doc: 'Determine current directory')
    method(name: 'pwsh', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Core Script')
    method(name: 'pwsh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'java.lang.Boolean'), parameter(name: 'returnStdout', type: 'java.lang.Boolean'), ], doc: 'PowerShell Core Script')
    method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
    method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
    method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
    method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
    method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
    method(name: 'sh', type: 'Object', params: [script:'groovy.lang.GString'], doc: 'Shell Script')
    method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'java.lang.Boolean'), parameter(name: 'returnStdout', type: 'java.lang.Boolean'), ], doc: 'Shell Script')
    method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'groovy.lang.GString'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'java.lang.Boolean'), parameter(name: 'returnStdout', type: 'java.lang.Boolean'), ], doc: 'Shell Script')
    method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
    method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
    method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'java.lang.Boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'java.lang.Boolean'), ], doc: 'Stash some files to be used later in the build')
    method(name: 'tee', type: 'Object', params: [file:'java.lang.String', body:'Closure'], doc: 'Tee output to file')
    method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
    method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
    method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
    method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
    method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'read', type: 'java.lang.Boolean'), parameter(name: 'test', type: 'java.lang.Boolean'), ], doc: 'Extract Zip file')
    method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
    method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'java.lang.Iterable'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
    method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
    method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'java.lang.Object'), parameter(name: 'pretty', type: 'java.lang.Integer'), ], doc: 'Write JSON to a file in the workspace.')
    method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
    method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
    method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'java.lang.Boolean'), ], doc: 'Write a yaml from an object.')
    method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
    method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'java.lang.Boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'java.lang.Boolean'), ], doc: 'Create Zip file')
    method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
    method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
    method(name: 'containerLog', type: 'Object', params: [name:'java.lang.String'], doc: 'Advanced/Deprecated Get container log from Kubernetes')
    method(name: 'containerLog', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'limitBytes', type: 'java.lang.Integer'), parameter(name: 'returnLog', type: 'java.lang.Boolean'), parameter(name: 'sinceSeconds', type: 'java.lang.Integer'), parameter(name: 'tailingLines', type: 'java.lang.Integer'), ], doc: 'Get container log from Kubernetes')
    method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts java.lang.Integero the workspace')
    method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'java.util.Map'), ], doc: 'Copy archived artifacts java.lang.Integero the workspace')

    method(name: 'waitForQualityGate', type: 'Object', params: [abortPipeline:'java.lang.Boolean'], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
    method(name: 'waitForQualityGate', type: 'Object', namedParams: [parameter(name: 'abortPipeline', type: 'java.lang.Boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'webhookSecretId', type: 'java.lang.String'), ], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')

    // custom
    method(name: 'usernamePassword', type: 'Object', namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'passwordVariable', type: 'java.lang.String'), parameter(name: 'usernameVariable', type: 'java.lang.String')])
    method(name: 'withSonarQubeEnv', type: 'Object', params: [body: 'Closure'], namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String')])
    method(name: 'parameters', type: 'Object', params: [parameters:'java.util.List'], doc: 'Set job parameters')
    method(name: 'gitParameter', type: 'Object', namedParams: [parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'branchFilter', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'quickFilterEnabled', type: 'java.lang.Boolean'), parameter(name: 'selectedValue', type: 'java.lang.String'), parameter(name: 'sortMode', type: 'java.lang.String'), parameter(name: 'tagFilter', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'),])
    method(name: 'choice', type: 'Object', namedParams: [parameter(name: 'choices', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String')])
    method(name: 'disableConcurrentBuilds', type: 'Object')
    method(name: 'pipelineTriggers', type: 'Object', params: [parameters:'java.util.List'], doc: 'Set job pipeline triggers')
    method(name: 'GenericTrigger', type: 'Object', namedParams: [parameter(name: 'causeString', type: 'java.lang.String'), parameter(name: 'genericVariables', type: 'java.util.List'), parameter(name: 'regexpFilterExpression', type: 'groovy.lang.GString'), parameter(name: 'regexpFilterText', type: 'java.lang.String'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'tokenCredentialId', type: 'java.lang.String'),])
    method(name: 'validatingString', type: 'Object', namedParams: [parameter(name: 'defaultValue', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'failedValidationMessage', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'regex', type: 'java.lang.String'),])
    method(name: 'string', type: 'Object', namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'variable', type: 'java.lang.String')])
    method(name: 'file', type: 'Object', namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'variable', type: 'java.lang.String')])
    method(name: 'listGitBranches', type: 'Object', namedParams: [parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'remoteURL', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'branchFilter', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'quickFilterEnabled', type: 'java.lang.Boolean'), parameter(name: 'selectedValue', type: 'java.lang.String'), parameter(name: 'sortMode', type: 'java.lang.String'), parameter(name: 'tagFilter', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'),])
    method(name: 'booleanParam', type: 'Object', namedParams: [parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String')])
    method(name: 'importDeveloperProfile', type: 'Object', namedParams: [parameter(name: 'importIntoExistingKeychain', type: 'java.lang.Boolean'), parameter(name: 'profileId', type: 'java.lang.String')])
    method(name: 'xcodeBuild', type: 'Object', namedParams: [parameter(name: 'xcodeSchema', type: 'java.lang.String'), parameter(name: 'xcodeWorkspaceFile', type: 'java.lang.String'), parameter(name: 'ipaOutputDirectory', type: 'java.lang.String'), parameter(name: 'ipaExportMethod', type: 'java.lang.String'), parameter(name: 'generateArchive', type: 'java.lang.Boolean'), parameter(name: 'buildIpa', type: 'java.lang.Boolean'), parameter(name: 'ipaName', type: 'java.lang.String'), parameter(name: 'bundleID', type: 'java.lang.String'), parameter(name: 'cleanBeforeBuild', type: 'java.lang.Boolean'), parameter(name: 'configuration', type: 'java.lang.String'), parameter(name: 'xcodebuildArguments', type: 'java.lang.String'), parameter(name: 'developmentTeamName', type: 'java.lang.String'), parameter(name: 'developmentTeamID', type: 'java.lang.String'), parameter(name: 'cfBundleShortVersionStringValue', type: 'java.lang.String'), parameter(name: 'cfBundleVersionValue', type: 'java.lang.String'), parameter(name: 'keychainId', type: 'java.lang.String'), parameter(name: 'signingMethod', type: 'java.lang.String')])
    method(name: 'archiveArtifacts', type: 'Object', namedParams: [parameter(name: 'onlyIfSuccessful', type: 'java.lang.Boolean'), parameter(name: 'artifacts', type: 'java.lang.String')])
    method(name: 'unlockMacOSKeychain', type: 'Object', namedParams: [parameter(name: 'keychainId', type: 'java.lang.String'), parameter(name: 'keychainPath', type: 'java.lang.String'), parameter(name: 'keychainPwd', type: 'java.lang.String')])
    method(name: 'extendedChoice', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'saveJSONParameterToFile', type: 'java.lang.Boolean'), parameter(name: 'type', type: 'java.lang.String'), parameter(name: 'visibleItemCount', type: 'java.lang.Integer')])
    method(name: 'nodejs', type: 'Object', params: [name:'java.lang.String', body: 'Closure'], doc: 'nodejs build')
}